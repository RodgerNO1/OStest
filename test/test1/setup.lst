     1                                  ; ==========================================
     2                                  ; setup.asm
     3                                  ; 编译方法：nasm setup.asm -o setup.bin
     4                                  ; ==========================================
     5                                  
     6                                  [SECTION .code32]
     7                                  [BITS	32]
     8 00000000 EB00                            jmp LABEL_CODE     ; 
     9                                  
    10                                  ; GDT 选择子
    11                                  SelectorCode		equ		08h
    12                                  SelectorData		equ		10h	
    13                                  SelectorVideo		equ		18h
    14                                  SelectorGdt			equ		20h
    15                                  SelectorTssLdt		equ		28h
    16                                  SelectorIdt			equ		30h
    17                                  
    18                                  SelectorLdt0		equ		40h
    19                                  SelectorTss0		equ		40h
    20                                  SelectorLdt1		equ		40h
    21                                  SelectorTss1		equ		40h
    22                                  
    23                                  LABEL_CODE:
    24 00000002 E86A000000              	call show_pm	;显示pm标志
    25                                  	
    26 00000007 66B81000                	mov	ax,SelectorData
    27 0000000B 8ED8                    	mov	ds,ax
    28 0000000D 8EC0                    	mov	es,ax
    29 0000000F 8EE0                    	mov	fs,ax
    30 00000011 8EE8                    	mov	gs,ax
    31 00000013 8ED0                    	mov	ss,ax
    32 00000015 BCFEFF0000              	mov esp,0fffeh
    33 0000001A E824000000              	call setGdt
    34 0000001F E833000000              	call setIdt
    35 00000024 66B81000                    mov	ax,SelectorData
    36 00000028 8ED8                    	mov	ds,ax
    37 0000002A 8EE0                    	mov	fs,ax
    38 0000002C 8EE8                    	mov	gs,ax
    39 0000002E 8EC0                    	mov	es,ax
    40 00000030 8ED0                    	mov	ss,ax
    41 00000032 BCFEFF0000              	mov	esp,0fffeh
    42 00000037 E849000000                  call Init8259A
    43 0000003C E81E000000              	call setClk		;initialize 8253/54
    44                                  ;-------------------------------------------------------
    45                                  
    46                                  
    47                                  
    48                                  ;-------------------------------------------------------
    49                                  L6:
    50 00000041 EBFE                    	jmp L6	; main should never return here
    51                                  	
    52                                  ;------------------------------------------------------------------------------
    53                                  setGdt:
    54                                  		; 为加载 GDTR 作准备
    55 00000043 31C0                    		xor	eax, eax
    56 00000045 B8[08020000]            		mov	eax, LABEL_GDT		; eax <- gdt 基地址
    57 0000004A A3[4A020000]            		mov	dword [GdtPtr + 2], eax	; [GdtPtr + 2] <- gdt 基地址
    58                                  
    59                                  		; 加载 GDTR
    60 0000004F 0F0115[48020000]        		lgdt	[GdtPtr]
    61 00000056 C3                      		ret
    62                                  		
    63                                  setIdt:
    64 00000057 0F011D[52020000]                lidt [_idtr]                        ;加载中断描述符表寄存器IDTR
    65 0000005E C3                      		ret
    66                                  
    67                                  setClk:
    68 0000005F B036                    	mov	al,36h
    69 00000061 E643                    	out	43h,al
    70 00000063 9B                      	wait
    71                                  	
    72 00000064 66B89A2E                	mov	ax,11930;设置时钟中断频率(1193180/100)即100hz
    73 00000068 E640                    	out	40h,al
    74 0000006A 9B                      	wait
    75 0000006B 88E0                    	mov	al,ah
    76 0000006D E640                    	out	40h,al
    77 0000006F 9B                      	wait
    78 00000070 C3                      	ret
    79                                  show_pm:
    80 00000071 66B81800                	mov	ax, SelectorVideo
    81 00000075 8EE8                    	mov	gs, ax			; 视频段选择子(目的)
    82                                  	
    83 00000077 BF7E070000              	mov	edi, (80 * 11 + 79) * 2	; 屏幕第 11 行, 第 79 列。
    84 0000007C B40C                    	mov	ah, 0Ch			; 0000: 黑底    1100: 红字
    85 0000007E B050                    	mov	al, 'P'
    86 00000080 65668907                	mov	[gs:edi], ax
    87 00000084 C3                      	ret
    88                                  ;end show_pm
    89                                  
    90                                  ; Init8259A 
    91                                  Init8259A:
    92 00000085 B011                    	mov	al, 011h
    93 00000087 E620                    	out	020h, al	; 主8259, ICW1.
    94 00000089 E84E000000              	call	io_delay
    95                                  
    96 0000008E E6A0                    	out	0A0h, al	; 从8259, ICW1.
    97 00000090 E847000000              	call	io_delay   
    98                                  
    99 00000095 B020                    	mov	al, 020h	; IRQ0 对应中断向量 0x20时钟中断
   100 00000097 E621                    	out	021h, al	; 主8259, ICW2.
   101 00000099 E83E000000              	call	io_delay
   102                                  
   103 0000009E B028                    	mov	al, 028h	; IRQ8 对应中断向量 0x28
   104 000000A0 E6A1                    	out	0A1h, al	; 从8259, ICW2.
   105 000000A2 E835000000              	call	io_delay
   106                                  
   107 000000A7 B004                    	mov	al, 004h	; IR2 对应从8259
   108 000000A9 E621                    	out	021h, al	; 主8259, ICW3.
   109 000000AB E82C000000              	call	io_delay
   110                                  
   111 000000B0 B002                    	mov	al, 002h	; 对应主8259的 IR2
   112 000000B2 E6A1                    	out	0A1h, al	; 从8259, ICW3.
   113 000000B4 E823000000              	call	io_delay
   114                                  
   115 000000B9 B001                    	mov	al, 001h
   116 000000BB E621                    	out	021h, al	; 主8259, ICW4.
   117 000000BD E81A000000              	call	io_delay
   118                                  
   119 000000C2 E6A1                    	out	0A1h, al	; 从8259, ICW4.
   120 000000C4 E813000000              	call	io_delay
   121                                  
   122                                  	;mov	al, 11111111b	; 屏蔽主8259所有中断
   123 000000C9 B0FE                    	mov	al, 11111110b	; 仅仅开启定时器中断
   124 000000CB E621                    	out	021h, al	; 主8259, OCW1.
   125 000000CD E80A000000              	call	io_delay
   126                                  
   127 000000D2 B0FF                    	mov	al, 11111111b	; 屏蔽从8259所有中断
   128 000000D4 E6A1                    	out	0A1h, al	; 从8259, OCW1.
   129 000000D6 E801000000              	call	io_delay
   130                                  
   131 000000DB C3                      	ret
   132                                  
   133                                  io_delay:
   134 000000DC 90                      	nop
   135 000000DD 90                      	nop
   136 000000DE 90                      	nop
   137 000000DF 90                      	nop
   138 000000E0 C3                      	ret
   139                                  	
   140                                  ; int handler ---------------------------------------------------------------
   141                                  _ClockHandler:
   142 000000E1 B40C                    	mov	ah, 0Ch				; 0000: 黑底    1100: 红字
   143 000000E3 B043                    	mov	al, 'C'
   144 000000E5 6566A38C000000          	mov	[gs:((80 * 0 + 70) * 2)], ax	; 屏幕第 0 行, 第 70 列。
   145 000000EC CF                      	iretd
   146                                  	
   147 000000ED 1E                      	push ds
   148 000000EE 50                      	push eax
   149 000000EF B020                    	mov	al, 20h
   150 000000F1 E620                    	out	20h, al				; 发送 EOI
   151 000000F3 B810000000              	mov eax,SelectorData
   152 000000F8 B801000000              	mov eax,1
   153 000000FD 3D[4E020000]            	cmp eax,current
   154 00000102 740C                    	je .t1
   155 00000104 B801000000              	mov eax,1
   156 00000109 A3[4E020000]            	mov dword[current],eax
   157                                  ;	jmp SelectorTss1:0
   158 0000010E EB0A                    	jmp .t2	
   159                                  .t1:
   160 00000110 B800000000              	mov eax,0
   161 00000115 A3[4E020000]            	mov dword[current],eax
   162                                  ;	jmp SelectorTss0:0
   163                                  .t2:
   164 0000011A 58                      	pop eax
   165 0000011B 1F                      	pop ds
   166 0000011C CF                      	iretd
   167                                  
   168                                  _UserIntHandler:
   169                                  	
   170 0000011D B40C                    	mov	ah, 0Ch				; 0000: 黑底    1100: 红字
   171 0000011F B049                    	mov	al, 'I'
   172 00000121 6566A38C000000          	mov	[gs:((80 * 0 + 70) * 2)], ax	; 屏幕第 0 行, 第 70 列。
   173 00000128 CF                      	iretd
   174                                  
   175                                  _SpuriousHandler:
   176 00000129 B40C                    	mov	ah, 0Ch				; 0000: 黑底    1100: 红字
   177 0000012B B021                    	mov	al, '!'
   178 0000012D 6566A396000000          	mov	[gs:((80 * 0 + 75) * 2)], ax	; 屏幕第 0 行, 第 75 列。
   179 00000134 EBFE                    	jmp $					;未知系统中断，系统死循环
   180 00000136 CF                      	iretd
   181                                  ;-------------------------------------------------------------------
   182                                  task0:
   183 00000137 6A65                    	push 0x65
   184 00000139 E826000000              	call put_char
   185 0000013E EBF7                    	jmp task0
   186                                  	
   187                                  task1:
   188 00000140 6A65                    	push 0x65
   189 00000142 E81D000000              	call put_char
   190 00000147 EBF7                    	jmp task1
   191                                  ;-------------------------------------------------------------------
   192                                  _sys_get_cursor:;以下取当前光标位置ax
   193 00000149 66BAD403                         mov dx,0x3d4
   194 0000014D B00E                             mov al,0x0e
   195 0000014F EE                               out dx,al
   196 00000150 66BAD503                         mov dx,0x3d5
   197 00000154 EC                               in al,dx                        ;高8位 
   198 00000155 88C4                             mov ah,al
   199                                  
   200 00000157 66BAD403                         mov dx,0x3d4
   201 0000015B B00F                             mov al,0x0f
   202 0000015D EE                               out dx,al
   203 0000015E 66BAD503                         mov dx,0x3d5
   204 00000162 EC                               in al,dx                        ;低8位 AX=代表光标位置的16位数
   205 00000163 C3                      		 ret
   206                                  ;end _sys_get_cursor		 
   207                                  
   208                                  put_char:                                ;显示一个字符 vl=字符ascii
   209 00000164 1E                      		 push ds
   210 00000165 06                      		 push es
   211 00000166 0FA8                    		 push gs
   212 00000168 55                      		 push ebp
   213 00000169 89E5                    		 mov ebp,esp
   214                                  		 
   215 0000016B 8B4D14                  		 mov ecx,[ebp+20]				;CX 存放字符
   216                                           ;以下取当前光标位置
   217 0000016E E8D6FFFFFF              		 call _sys_get_cursor
   218 00000173 6689C3                  		 mov bx,ax						;BX 存放光标位置
   219                                  		 
   220 00000176 66B81800                		 mov ax, SelectorVideo
   221 0000017A 8EE8                    		 mov gs, ax			; 视频段选择子
   222                                  		 
   223 0000017C 80F90D                           cmp cl,0x0d                     ;回车符？
   224 0000017F 750E                             jnz .put_0a                     ;不是。看看是不是换行等字符 
   225 00000181 6689D8                           mov ax,bx                       ;此句略显多余，但去掉后还得改书，麻烦 
   226 00000184 B350                             mov bl,80                       
   227 00000186 F6F3                             div bl
   228 00000188 F6E3                             mul bl
   229 0000018A 6689C3                           mov bx,ax
   230 0000018D EB51                             jmp .set_cursor
   231                                  
   232                                   .put_0a:
   233 0000018F 80F90A                           cmp cl,0x0a                     ;换行符？
   234 00000192 7506                             jnz .put_other                  ;不是，那就正常显示字符 
   235 00000194 6683C350                         add bx,80
   236 00000198 EB0E                             jmp .roll_screen
   237                                  
   238                                   .put_other:                             ;正常显示字符
   239 0000019A 66D1E3                           shl bx,1
   240 0000019D 6567880F                         mov [gs:bx],cl
   241                                  
   242                                           ;以下将光标位置推进一个字符
   243 000001A1 66D1EB                           shr bx,1
   244 000001A4 6683C301                         add bx,1
   245                                  
   246                                   .roll_screen:
   247 000001A8 6681FBD007                       cmp bx,2000                     ;光标超出屏幕？滚屏
   248 000001AD 7C31                             jl .set_cursor
   249                                  
   250 000001AF 66B81800                         mov ax,SelectorVideo
   251 000001B3 8ED8                             mov ds,ax
   252 000001B5 8EC0                             mov es,ax
   253 000001B7 FC                               cld
   254 000001B8 66BEA000                         mov si,0xa0
   255 000001BC 66BF0000                         mov di,0x00
   256 000001C0 66B98007                         mov cx,1920
   257 000001C4 F366A5                           rep movsw
   258 000001C7 66BB000F                         mov bx,3840                     ;清除屏幕最底一行
   259 000001CB 66B95000                         mov cx,80
   260                                   .cls:
   261 000001CF 656766C7072007                   mov word[gs:bx],0x0720
   262 000001D6 6683C302                         add bx,2
   263 000001DA E2F3                             loop .cls
   264                                  
   265 000001DC 66BB8007                         mov bx,1920
   266                                   
   267                                  .set_cursor:
   268                                  		
   269 000001E0 E806000000              		call local_set_cursor
   270                                  		
   271 000001E5 5D                      		 pop ebp
   272 000001E6 0FA9                    		 pop gs
   273 000001E8 07                      		 pop es
   274 000001E9 1F                      		 pop ds
   275 000001EA C3                      		 ret
   276                                  ;end  _sys_put_char 
   277                                  
   278                                  local_set_cursor:;参数BX
   279 000001EB 66BAD403                		 mov dx,0x3d4
   280 000001EF B00E                             mov al,0x0e
   281 000001F1 EE                               out dx,al
   282 000001F2 66BAD503                         mov dx,0x3d5
   283 000001F6 88F8                             mov al,bh
   284 000001F8 EE                               out dx,al
   285 000001F9 66BAD403                         mov dx,0x3d4
   286 000001FD B00F                             mov al,0x0f
   287 000001FF EE                               out dx,al
   288 00000200 66BAD503                         mov dx,0x3d5
   289 00000204 88D8                             mov al,bl
   290 00000206 EE                               out dx,al
   291 00000207 C3                      		 ret
   292                                  
   293                                  		 
   294                                  ;======================data======================================== 
   295                                  
   296                                  LABEL_DATA:
   297                                  ; GDT
   298                                  LABEL_GDT:
   299 00000208 00000000                	dw 	0000h,0000h	;limit,baseL
   300 0000020C 00                      	db	00h			;baseM
   301 0000020D 0000                    	dw	0000h		;gran,type
   302 0000020F 00                      	db	00h			;baseH
   303                                  DESC_CODE:
   304 00000210 FFFF0000                	dw 	0FFFFh,0000h
   305 00000214 00                      	db	00h
   306 00000215 9AC0                    	dw	0C09Ah
   307 00000217 00                      	db	00h
   308                                  DESC_DATA:
   309 00000218 FFFF0000                	dw 	0FFFFh,0000h
   310 0000021C 00                      	db	00h
   311 0000021D 9280                    	dw	8092h
   312 0000021F 00                      	db	00h
   313                                  DESC_VIDEO:
   314 00000220 FFFF0080                	dw 	0FFFFh,8000h
   315 00000224 0B                      	db	0Bh
   316 00000225 9200                    	dw	0092h
   317 00000227 00                      	db	00h
   318                                  DESC_LDT0:
   319 00000228 1F00EE0E                	dw 	001fh,0eeeh
   320 0000022C 00                      	db	00h
   321 0000022D 8200                    	dw	0082h
   322 0000022F 00                      	db	00h
   323                                  DESC_TSS0:
   324 00000230 6700[5802]              	dw 	0067h,_tss0_pos
   325 00000234 00                      	db	00h
   326 00000235 8900                    	dw	0089h
   327 00000237 00                      	db	00h
   328                                  DESC_LDT1:
   329 00000238 1F00[4803]              	dw 	001fh,_ldt1_pos
   330 0000023C 00                      	db	00h
   331 0000023D 8200                    	dw	0082h
   332 0000023F 00                      	db	00h
   333                                  DESC_TSS1:
   334 00000240 6700[E002]              	dw 	0067h,_tss1_pos
   335 00000244 00                      	db	00h
   336 00000245 8900                    	dw	0089h
   337 00000247 00                      	db	00h
   338                                  ; GDT 结束
   339                                  
   340                                  GdtLen		equ	$ - LABEL_GDT	; GDT长度
   341 00000248 3F00                    GdtPtr		dw	GdtLen - 1		; GDT界限
   342 0000024A 00000000                			dd	0				; GDT基地址
   343                                  			
   344 0000024E 00000000                current dd 0x0
   345 00000252 FF07                    _idtr:  dw	256*8-1		;IDT的界限
   346 00000254 [68030000]                      dd	idt	;中断描述符表的线性地址
   347                                  _tss0_pos equ $		
   348 00000258 00000000                _tss0:	dd	0000h                  ;back link
   349 0000025C 00FF000030000000        		dd	0ff00h, 0030h 			;esp0,  ss0
   350 00000264 0000000000000000        		dd	0000h, 0000h           ;esp1,  ss1
   351 0000026C 0000000000000000        		dd	0000h, 0000h           ;esp2,  ss2
   352 00000274 00000000                		dd	0000h                  ;cr3
   353 00000278 00000000                		dd	0000h                  ;eip
   354 0000027C 00020000                		dd	0200h                  ;eflags
   355 00000280 000000000000000000-     		dd	0000h, 0000h, 0000h, 0000h
   356 00000289 00000000000000     
   357                                                                     ;eax,  ecx,  edx,  ebx
   358 00000290 00FF0000                		dd	0ff00h            ;esp
   359 00000294 000000000000000000-     		dd	0000h, 0000h, 0000h    ;ebp, esi, edi
   360 0000029D 000000             
   361 000002A0 170000000F00000017-     		dd	0017h, 000fh, 0017h, 0017h, 0017h, 0017h
   362 000002A9 000000170000001700-
   363 000002B2 000017000000       
   364                                  						           ;es,  cs,  ss,  ds,  fs,  gs
   365 000002B8 40000000                		dd	SelectorLdt0		       ;ldt
   366 000002BC 00000008                		dd	8000000h		       ;trace bitmap
   367                                  ;LDT0 for task 0,Every task must have private ldt.
   368                                  _ldt0_pos equ $
   369 000002C0 0000000000000000        _ldt0:	dd	00000000h, 00000000h   ;dummy
   370 000002C8 FF0F000000FAC000        		dd	00000fffh, 00c0fa00h   ;task 0 code segment
   371 000002D0 FF0F000000F2C000        		dd	00000fffh, 00c0f200h   ;task 0 data segment
   372 000002D8 0000000000000000        		dd	00000000h, 00000000h
   373                                  _tss1_pos equ $		
   374 000002E0 00000000                _tss1:	dd	0000h                  ;back link
   375 000002E4 00FF000030000000        		dd	0ff00h, 0030h 			;esp0,  ss0
   376 000002EC 0000000000000000        		dd	0000h, 0000h           ;esp1,  ss1
   377 000002F4 0000000000000000        		dd	0000h, 0000h           ;esp2,  ss2
   378 000002FC 00000000                		dd	0000h                  ;cr3
   379 00000300 00000000                		dd	0000h                  ;eip
   380 00000304 00020000                		dd	0200h                  ;eflags
   381 00000308 000000000000000000-     		dd	0000h, 0000h, 0000h, 0000h
   382 00000311 00000000000000     
   383                                                                     ;eax,  ecx,  edx,  ebx
   384 00000318 00FF0000                		dd	0ff00h            ;esp
   385 0000031C 000000000000000000-     		dd	0000h, 0000h, 0000h    ;ebp, esi, edi
   386 00000325 000000             
   387 00000328 170000000F00000017-     		dd	0017h, 000fh, 0017h, 0017h, 0017h, 0017h
   388 00000331 000000170000001700-
   389 0000033A 000017000000       
   390                                  						           ;es,  cs,  ss,  ds,  fs,  gs
   391 00000340 40000000                		dd	SelectorLdt1		       ;ldt
   392 00000344 00000008                		dd	8000000h		       ;trace bitmap
   393                                  ;LDT0 for task 0,Every task must have private ldt.
   394                                  _ldt1_pos equ $
   395 00000348 0000000000000000        _ldt1:	dd	00000000h, 00000000h   ;dummy
   396 00000350 FF0F000000FAC000        		dd	00000fffh, 00c0fa00h   ;task 1 code segment
   397 00000358 FF0F000000F2C000        		dd	00000fffh, 00c0f200h   ;task 1 data segment
   398 00000360 0000000000000000        		dd	00000000h, 00000000h
   399                                  		
   400 00000368 00000000<rept>          idt: times 256 dd 0	
   401                                  
   402                                  Code32_len 	equ $-LABEL_CODE
